#
# This file is a part of HyperaDev/actions, licensed under the MIT License.
#
# Copyright (c) 2021-2023 Joshua Sing <joshua@hypera.dev>
# Copyright (c) 2021-2023 LooFifteen <luis@lu15.dev>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# GitHub Actions workflow to build and test a Go project.
name: "Go"
on:
  workflow_call:
    inputs:
      go_version:
        description: "Go version to use when building"
        default: "stable"
        type: string
        required: false
      go_build_args:
        description: "Go build arguments"
        default: ""
        type: string
        required: false
      codecov_enabled:
        description: "Whether test coverage should be uploaded to Codecov"
        default: false
        type: boolean
        required: false
      codecov_files:
        description: "Comma-separated paths to the coverage report(s)"
        default: ""
        type: string
        required: false
      codecov_directory:
        description: "Directory to search for coverage reports in"
        default: ""
        type: string
        required: false
      lint_enabled:
        description: "Whether to run golangci-lint"
        default: false
        type: boolean
        required: false
      vulncheck_enabled:
        description: "Whether to run govulncheck"
        default: true
        type: boolean
        required: false
      upload_artifacts:
        description: "Artifacts to upload after building"
        default: ""
        type: string
        required: false
    secrets:
      CODECOV_TOKEN:
        description: "Codecov repository upload token"
        required: false

permissions:
  contents: read

jobs:
  vulncheck:
    name: "Vulnerability Check"
    runs-on: "ubuntu-latest"
    if: inputs.vulncheck_enabled
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          submodules: true

      - name: "Setup Go ${{ inputs.go_version }}"
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: "${{ inputs.go_version }}"
          cache: true
          check-latest: true

      - name: "Install govulncheck"
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: "Run govulncheck"
        run: govulncheck ./...

  build:
    name: "Build (${{ matrix.os }})"
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          submodules: true

      - name: "Setup Go ${{ inputs.go_version }}"
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: "${{ inputs.go_version }}"
          cache: true
          check-latest: true

      - name: "Download dependencies"
        run: go mod download

      - name: "Verify dependencies"
        run: go mod verify

      - name: "Lint"
        if: inputs.lint_enabled && runner.os == 'Linux'
        uses: golangci/golangci-lint-action@2226d7cb06a077cd73e56eedd38eecad18e5d837 # v6.5.0
        with:
          version: "latest"
          only-new-issues: true

      - name: "Build"
        run: go build -v ${{ inputs.go_build_args }} ./...

      - name: "Test"
        run: go test -race -coverprofile="coverage.out" -covermode=atomic -v ./...

      - name: "Upload coverage to Codecov"
        if: inputs.codecov_enabled && runner.os == 'Linux'
        uses: codecov/codecov-action@13ce06bfc6bbe3ecf90edbbf1bc32fe5978ca1d3 # v5.3.1
        with:
          files: "${{ inputs.codecov_files }}"
          directory: "${{ inputs.codecov_directory }}"
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"

      - name: "Upload artifacts"
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: "${{ runner.os }}-artifacts"
          if-no-files-found: ignore
          path: |
            coverage.out
            ${{ inputs.upload_artifacts }}
